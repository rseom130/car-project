package com.kimsiso.carproject

import android.content.BroadcastReceiver
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.media.session.MediaController
import android.media.session.MediaSessionManager
import android.media.session.PlaybackState
import android.os.Build
import android.provider.Settings
import android.util.Log
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import androidx.core.content.ContextCompat

class MusicController(private val context: Context) {
    private var mediaController: MediaController? = null
    private var uiUpdateReceiver: BroadcastReceiver? = null
    private var titleTextView: TextView? = null
    private var artistTextView: TextView? = null
    private var albumImageView: ImageView? = null
    private var playButton: Button? = null
    private var nextButton: Button? = null
    private var prevButton: Button? = null
    private var isReceiverRegistered = false // ‚úÖ Î¶¨ÏãúÎ≤Ñ Îì±Î°ù Ïó¨Î∂Ä ÌôïÏù∏

    init {
        // ÏïåÎ¶º Î¶¨Ïä§ÎÑà ÏÑúÎπÑÏä§ Ï†ëÍ∑º Í∂åÌïú ÌôïÏù∏
        if (!isNotificationServiceEnabled(context)) {
//            Log.d("MusicInfo", "üö® ÏïåÎ¶º Ï†ëÍ∑º Í∂åÌïú ÏóÜÏùå. ÏÑ§Ï†ï ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô.")
            context.startActivity(Intent(Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS))
        } else {
//            Log.d("MusicInfo", "‚úÖ ÏïåÎ¶º Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌôúÏÑ±ÌôîÎê®.")
        }

        setupMediaController()
        registerReceiver()
    }

    // UI ÏöîÏÜå Ïó∞Í≤∞ (üéµ ÏùåÏïÖ Ïª®Ìä∏Î°§ Î≤ÑÌäºÎèÑ Ìè¨Ìï®)
    fun bindViews(
        titleView: TextView,
        artistView: TextView,
        albumView: ImageView,
        playBtn: Button,
        nextBtn: Button,
        prevBtn: Button
    ) {
        titleTextView = titleView
        artistTextView = artistView
        albumImageView = albumView
        playButton = playBtn
        nextButton = nextBtn
        prevButton = prevBtn

        playButton?.setOnClickListener { togglePlayPause() }
        nextButton?.setOnClickListener { skipToNextTrack() }
        prevButton?.setOnClickListener { skipToPreviousTrack() }

        updatePlayButtonText()
    }

    // üéµ ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ ÎØ∏ÎîîÏñ¥ ÏÑ∏ÏÖò Í∞ÄÏ†∏Ïò§Í∏∞
    private fun setupMediaController() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            val mediaSessionManager =
                context.getSystemService(MediaSessionManager::class.java)
            val mediaSessions = mediaSessionManager.getActiveSessions(
                ComponentName(context, MusicNotificationListener::class.java)
            )

            if (mediaSessions.isNotEmpty()) {
                mediaController = mediaSessions[0] // Ï≤´ Î≤àÏß∏ ÎØ∏ÎîîÏñ¥ ÏÑ∏ÏÖò ÏÇ¨Ïö©
                updatePlayButtonText()
            } else {
//                Log.d("MusicController", "‚ö†Ô∏è ÌôúÏÑ±ÌôîÎêú ÎØ∏ÎîîÏñ¥ ÏÑ∏ÏÖòÏù¥ ÏóÜÏùå")
            }
        }
    }

    // ‚ñ∂ Ïû¨ÏÉù / ‚è∏ ÏùºÏãúÏ†ïÏßÄ ÌÜ†Í∏Ä Í∏∞Îä•
    fun togglePlayPause() {
//        Log.d("App-Test2", playButton.toString())
        mediaController?.let {
            val playbackState = it.playbackState
            if (playbackState != null) {
                when (playbackState.state) {
                    PlaybackState.STATE_PLAYING -> {
                        it.transportControls.pause()
                        playButton?.text = "PLAY"
                    }
                    PlaybackState.STATE_PAUSED, PlaybackState.STATE_STOPPED -> {
                        it.transportControls.play()
                        playButton?.text = "PAUSE"
                    }
                    // else -> Log.d("MusicController", "‚ö†Ô∏è ÎØ∏ÎîîÏñ¥ ÏÉÅÌÉú ÌôïÏù∏ Î∂àÍ∞Ä")
                }
            }
        }
    }

    // ‚è≠ Îã§Ïùå Í≥°ÏúºÎ°ú Ïä§ÌÇµ
    fun skipToNextTrack() {
        mediaController?.transportControls?.skipToNext()
        playButton?.text = "PAUSE"
    }

    // ‚èÆ Ïù¥Ï†Ñ Í≥°ÏúºÎ°ú Ïä§ÌÇµ
    fun skipToPreviousTrack() {
        mediaController?.transportControls?.skipToPrevious()
        playButton?.text = "PAUSE"
    }

    // üîÑ ÌòÑÏû¨ ÎØ∏ÎîîÏñ¥ ÏÉÅÌÉúÏóê ÎßûÍ≤å playButtonÏùò ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
    private fun updatePlayButtonText() {
        mediaController?.let {
            val playbackState = it.playbackState
//            Log.d("App-Test", PlaybackState.STATE_PLAYING.toString());
//            Log.d("App-Test", playbackState?.state.toString())
//            Log.d("App-Test", playButton.toString())
            playButton?.text = when (playbackState?.state) {
                PlaybackState.STATE_PLAYING -> "PAUSE"
                PlaybackState.STATE_PAUSED, PlaybackState.STATE_STOPPED -> "PLAY"
                else -> "PLAY"
            }
        }
    }

    // ÏïåÎ¶º Î¶¨Ïä§ÎÑà Í∂åÌïú Ìï®Ïàò
    private fun isNotificationServiceEnabled(context: Context): Boolean {
        val cn = ComponentName(context, MusicNotificationListener::class.java)
        val enabledListeners = Settings.Secure.getString(context.contentResolver, "enabled_notification_listeners")
        return enabledListeners?.contains(cn.flattenToString()) ?: false
    }

    // ‚úÖ UI ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏúÑÌïú BroadcastReceiver
    private fun updateUI(intent: Intent?) {
        // UI ÏóÖÎç∞Ïù¥Ìä∏ Î°úÏßÅ
        if (intent?.action == "MUSIC_INFO_UPDATE") {
            val title = intent.getStringExtra("title") ?: "Ï†úÎ™© ÏóÜÏùå"
            val artist = intent.getStringExtra("artist") ?: "Í∞ÄÏàò ÏóÜÏùå"
            val albumByteArray = intent.getByteArrayExtra("album")
//            Log.d("App-Test", title)

            var albumArt: Bitmap? = null
            if (albumByteArray != null) {
                albumArt = BitmapFactory.decodeByteArray(albumByteArray, 0, albumByteArray.size)
            }
            // ‚úÖ UI ÏóÖÎç∞Ïù¥Ìä∏
            titleTextView?.text = title
            artistTextView?.text = artist
            albumImageView?.setImageBitmap(albumArt ?: ContextCompat.getDrawable(context!!, R.drawable.ic_launcher_background)?.let { drawable ->
                (drawable as android.graphics.drawable.BitmapDrawable).bitmap
            })

        }
    }

    fun registerReceiver() {
        val filter = IntentFilter("MUSIC_INFO_UPDATE")
//        context.registerReceiver(uiUpdateReceiver, filter, Context.RECEIVER_EXPORTED)
        if (uiUpdateReceiver == null) { // ‚úÖ Ï§ëÎ≥µ Îì±Î°ù Î∞©ÏßÄ
            uiUpdateReceiver = object : BroadcastReceiver() {
                override fun onReceive(context: Context?, intent: Intent?) {
                    updateUI(intent)
                }
            }
            val filter = IntentFilter("MUSIC_INFO_UPDATE")
            context.registerReceiver(uiUpdateReceiver, filter, Context.RECEIVER_EXPORTED)
        }
    }

    fun unregisterReceiver() {
//        context.unregisterReceiver(uiUpdateReceiver)
        uiUpdateReceiver?.let {
            context.unregisterReceiver(it)
            uiUpdateReceiver = null // ‚úÖ Ìï¥Ï†ú ÌõÑ null Ï≤òÎ¶¨
        }
    }
}